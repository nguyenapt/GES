@using GES.Clients.Web.Extensions
@using GES.Clients.Web.Helpers
@using GES.Clients.Web.Models
@using GES.Common.Configurations
@using GES.Common.Enumeration
@using GES.Common.Resources
@using GES.Inside.Data.Models.Anonymous
@using GES.Inside.Data.Models.CaseProfiles
@model GES.Inside.Data.Models.CaseProfiles.CaseProfileIssueComponent

@{
    var gesCaseReportType = (GesCaseReportType)ViewBag.CaseProfileType;
    var isResolvedOrArchivedGovernanceType = gesCaseReportType == GesCaseReportType.SrGovArchived || gesCaseReportType == GesCaseReportType.SrGovResolved;
    var isSrGovCase = gesCaseReportType == GesCaseReportType.SrGovEngage || isResolvedOrArchivedGovernanceType;
}

<div class="box box-primary">
    <div class="box-header with-border">
        <h3 class="box-title">
            @Resources.Summary
        </h3>
    </div><!-- /.box-header -->
    <div class="box-body">
        <p class="ges-content">@Html.Raw(Model.Summary)</p>
        
        @if (gesCaseReportType == GesCaseReportType.SrArchived || isResolvedOrArchivedGovernanceType || gesCaseReportType == GesCaseReportType.BpArchived)
        {
            Html.RenderPartial("CaseProfiles/Shared/Watermark", (GesCaseReportType)ViewBag.CaseProfileType);
        }
    </div>
</div>

@if (Model.ClosingIncidentAnalysisComponent != null && isSrGovCase)
{
    Html.RenderPartial("CaseProfiles/Shared/SrGovClosingIncidentAnalysis", Model.ClosingIncidentAnalysisComponent as CaseProfileIncidentAnalysisComponent);
}

@SharedComponents.BuildTabContent(Html, new Dictionary<string, KeyValuePair<string, string>>
{
    [CommonHelper.ConvertNameToHtmlElementId(Resources.GesCommentary)] = new KeyValuePair<string, string>($"<i class=\"fa fa-comment\" aria-hidden=\"true\"></i> {Resources.GesCommentary}", Html.RenderBlockContent(m => m.GesCommentary, Model.GesCommentaryModified,blockTitle:"").ToHtmlString()),
    [CommonHelper.ConvertNameToHtmlElementId(Resources.LatestNews)] = new KeyValuePair<string, string>($"<i class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i> {Resources.LatestNews}", Html.RenderBlockContent(m => m.LatestNews, Model.LatestNewsModified, Resources.LatestNewsArchive,blockTitle:"").ToHtmlString())
})

@{ Html.RenderPartial("~/Views/Shared/_Dialog.cshtml", new ModalPopupViewModel
   {
       ModalTitle = Resources.LatestNewsArchive,
       DateContentPairs = Model.LatestNewsArchive?.Select(o => new KeyValueObject<string, string>(o.LatestNewsModified?.ToString(Configurations.DateFormat), o.Description)).ToList()
   });
} 